// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                  @id
  email                 String                  @unique
  name                  String?
  emailVerified         Boolean                 @default(false)
  image                 String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @default(now()) @updatedAt
  sessions              Session[]
  accounts              Account[]
  Composition           Composition[]
  CompositionCompletion CompositionCompletion[]
  CompositionProgress   CompositionProgress[]
  CompositionFavorite   CompositionFavorite[]
  CompositionReaction   CompositionReaction[]
  notifications         Notification[]
  kanbanTasks          KanbanTask[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Composition {
  id          String                  @id @default(cuid())
  title       String
  description String?
  difficulty  Difficulty              @default(MEDIUM)
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @default(now()) @updatedAt
  createdById String?
  createdBy   User?                   @relation(fields: [createdById], references: [id])
  completions CompositionCompletion[]
  progresses  CompositionProgress[]
  favorites   CompositionFavorite[]
  reactions   CompositionReaction[]

  @@map("composition")
}

/// Records that a user completed at least one composition on a specific day (Asia/Kolkata).
model CompositionCompletion {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  compositionId String?
  composition   Composition? @relation(fields: [compositionId], references: [id])
  /// YYYY-MM-DD string for the day in Asia/Kolkata timezone
  dateKey       String
  completedAt   DateTime     @default(now())

  @@unique([userId, dateKey])
  @@index([userId, dateKey])
  @@map("composition_completion")
}

/// Track per-user progress on compositions (Solved/Attempting/Unsolved)
model CompositionProgress {
  id            String         @id @default(cuid())
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  compositionId String
  composition   Composition    @relation(fields: [compositionId], references: [id])
  status        ProgressStatus
  updatedAt     DateTime       @default(now()) @updatedAt

  @@unique([userId, compositionId])
  @@index([userId, status])
  @@map("composition_progress")
}

/// Track user favorites for compositions
model CompositionFavorite {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  compositionId String
  composition   Composition @relation(fields: [compositionId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())

  @@unique([userId, compositionId])
  @@index([userId])
  @@index([compositionId])
  @@map("composition_favorite")
}

/// Track user reactions (like/dislike) for compositions
model CompositionReaction {
  id            String       @id @default(cuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  compositionId String
  composition   Composition  @relation(fields: [compositionId], references: [id], onDelete: Cascade)
  value         ReactionType
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@unique([userId, compositionId])
  @@index([compositionId, value])
  @@index([userId])
  @@map("composition_reaction")
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum ProgressStatus {
  SOLVED
  ATTEMPTING
  UNSOLVED
}

enum ReactionType {
  LIKE
  DISLIKE
}

/// User notifications for real-time updates
model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String
  category  NotificationCategory
  isRead    Boolean          @default(false)
  metadata  Json?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt

  @@index([userId, isRead])
  @@index([userId, createdAt])
  @@index([userId, category])
  @@map("notification")
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
}

enum NotificationCategory {
  SYSTEM
  USER
  COMPOSITION
}

/// Kanban board tasks for user workflow management
model KanbanTask {
  id        String        @id @default(cuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  title     String
  description String?
  status    KanbanStatus  @default(SOURCED)
  order     Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt

  @@index([userId, status])
  @@index([userId, order])
  @@map("kanban_task")
}

enum KanbanStatus {
  SOURCED
  IN_PROGRESS
  INTERVIEW
}
